---
title: "Le format de données `Parquet`"
subtitle: "Ateliers du SSPHub #2"
author:
    - Lino Galiana
description: "Slides présentant les enjeux de l'utilisation du format `Parquet` et l'écosystème associé"
date: "2025-04-16"
date-format: long
slide-number: true
footer: |
  Ateliers du SSPHub #2
lang: fr-FR
chalkboard: # press the B key to toggle chalkboard
  theme: whiteboard
format: onyxia-revealjs
controls: true
css: custom.css
from: markdown+emoji
image: "/img/librairies2.png"
priority: 1
---

## "The obligatory intro slide"

![Source : [motherduck.com](https://motherduck.com/blog/big-data-is-dead/)](https://motherduck.com/_next/image/?url=https%3A%2F%2Fweb-assets-prod.motherduck.com%2Fassets%2Fimg%2Fimage_2_0f68796072.jpg&w=1920&q=75){fig-align="center" height=400}

## Enjeux

- Tendance à la [**massification**]{.orange} des données
    - Relatif aux [**capacités de stockage et de traitement**]{.blue2}

. . .

![Source : [AI with Python](https://www.packtpub.com/product/artificial-intelligence-with-python-second-edition/9781839219535)](https://ensae-reproductibilite.github.io/slides/img/vvv.png){fig-align="center" height=350}

## Pour traiter la volumétrie

- Utiliser un [**format**]{.orange} de données adapté (`Parquet`)

. . .

- Utiliser des [**outils**]{.orange} informatiques adaptés
  - Suffisant la plupart du temps : [**calcul *larger than memory* optimisé**]{.blue2} (`Arrow` / `DuckDB`)
  - Si volumétrie massive : [**calcul distribué**]{.blue2} (`Spark`)

. . .


- Utiliser une [**infra de stockage**]{.orange} adaptée (`S3`)

. . .

::: {.callout-note}
Nous allons voir comment ces trois points sont complémentaires.
:::

## "Big Data is dead" ?

* Jordan Tigani : [Big Data is dead](https://motherduck.com/blog/big-data-is-dead/)
    - _"The big data frontier keeps receding"_
    - _"Most people don't have that much data"_
    - _"Most data is rarely queried"_


. . .

- Plaidoyer pour une [**parcimonie**]{.orange}...
    - ... qui [**facilite la mise en production**]{.blue2} !


# Pourquoi le format `Parquet` ?

## Enjeux

- Le choix d'un format de données répond à un [**arbitrage**]{.orange} entre plusieurs critères :
  - [**Public cible**]{.blue2}
  - [**Finalité**]{.blue2} (traitement, analyse, diffusion)
  - [**Volumétrie**]{.blue2}
  - [**Interopérabilité**]{.blue2}

## Formats traditionnels

- Formats de données adhérents à un langage ([**sas7bdat**]{.orange}, [**RDS**]{.orange}, [**fst**]{.orange}, etc.)
  - [**Non-interopérables**]{.blue2} -> à éviter !

. . .

- Le format [**CSV**]{.orange}
  - [**Interopérable**]{.blue2} et [**simple**]{.blue2} d'utilisation
  - Pas de gestion des [**méta-données**]{.blue2}
  - Peu adapté aux [**données volumineuses**]{.blue2}

## Limites du `CSV` {.incremental}

:::: {.columns}

::: {.column width=70%}

- Des [**performances limitées**]{.orange}
  - [**Stockage**]{.blue2} : non-compressé -> [**espace disque élevé**]{.blue2}
  - [**Lecture**]{.blue2} : "orienté-ligne" -> [**performances faibles**]{.blue2}

:::

::: {.column width=30%}


![](images/parquet-table1.png){fig-align="center"}

:::


- **[Pas de typage]{.orange}** des données à l'écriture du fichier
  - Demande expertise et précaution à la lecture
  - Exemple: <b><ins>01</ins>004</b> pour le code commune d'Ambérieu-en-Bugey

::::

# Les avantages du format `Parquet`

## Un format léger {{< iconify fe feather color=#0f8c18 >}}

- [**Stockage**]{.orange} :
    - [**Compression**]{.blue2} : entre 5 et 20 fois plus léger qu'un CSV


. . .

::: {.nonincremental}
::::: {.callout-note}
## Exemple: Recensement de la Population

- [Ficher détail](https://www.insee.fr/fr/statistiques/8268848?sommaire=8205966) : 20 millions de lignes, 92 variables
    - CSV: > 4Go
    - Parquet: < 500Mo
:::::
:::

## Un format efficace

- [**Lecture**]{.orange} :
    - Jusqu’à 34x plus rapide qu’un CSV

. . .

- [**"Orienté colonne"**]{.orange}
  - Optimisé pour les [**traitements analytiques**]{.blue2}
  - Limite la quantité de données à mettre en mémoire
  - Conçu pour être écrit une fois mais lu fréquemment

. . .

![](/slides-data/images/parquet-read-columns.png){fig-align="center"}

## Pour optimiser la lecture

- [**Partitionner**]{.orange} ou [**ordonner**]{.orange} les données


![](https://ensae-reproductibilite.github.io/slides/img/partitions.png){fig-align="center" height="230"}

::: {.nonincremental}
::::: {.callout-warning}
## L'art de bien partitionner

- Partitionner par une/des [**variable(s) d'intérêt**]{.blue2} si gros fichier
    + [**Eviter**]{.blue2} de créer de [**nombreux petits (< 128Mo) fichiers**]{.blue2}
- Sinon ordonner les données avant d'écrire le fichier (cf. [Eric Mauvière](https://www.icem7.fr/outils/comment-bien-preparer-son-parquet/))

:::::
:::

## Un format universel et fiable

- Gestion native des [**méta-données**]{.orange}
  - Définition automatique d'un [**schéma**]{.blue2} (noms, types)
  - Mise à disposition plus [**robuste**]{.blue2}

. . .

- [**Interopérable**]{.orange}

. . .

- [**Open-source**]{.orange}

. . .

- Non lisible par un humain mais de plus en plus de visualiseurs en ligne
    - Par exemple sur le [SSPCloud](https://datalab.sspcloud.fr/data-explorer) {{< fa solid dragon >}}

# Du point de vue d'un producteur de données

## `Parquet`: quels avantages ?

* Format libre, _open source_ et [__indépendant du langage__]{.orange} ;
  * Les formats propriétaires imposent des outils aux consommateurs !

* __[Plus de confort]{.orange}__ pour les utilisateurs:
  * Des [requêtes plus rapides et efficaces]{.blue2}: seulement les données nécessaires sont lues
  * Des [données conformes]{.blue2} à la mise à disposition par le producteur

## `Parquet`: quels usages ?

* Format privilégié pour la mise à disposition de données internes à l’Insee:
  * Moins d’asymétries entre utilisateurs et producteurs.


::: {.callout-note .nonincremental}
## Premières diffusions à l’externe

- Bureaux de votes du **[__répertoire électoral unique__]{.blue2}** (REU):
- [__Recensement de la population__]{.blue2} (RP)
- [__Base permanente des équipements__]{.blue2} (BPE)

:::

## `Parquet`: quels usages ?

:::: {.columns}

::: {.column width=50%}

![](/slides-data/images/res_secondaires.png)

:::

::: {.column width=50%}

![](/slides-data/images/res_secondaires2.png)

:::

::::

_Exemples de cartes pouvant être produites simplement avec les données du recensement diffusées par l'Insee_


# Exploiter un fichier `Parquet`

## Enjeu

* `Parquet` ne résout pas tout
  * L’espace disque est optimisé
  * Les données décompressées doivent __[passer en RAM]{.blue2}__

. . .

* Le framework adapté dépend de la [__volumétrie__]{.orange}
  * Pour la plupart des besoins : `Arrow` et `DuckDB`


## Les frameworks

- Deux *frameworks* de référence : [Arrow](https://book.utilitr.org/03_Fiches_thematiques/Fiche_arrow.html) et [DuckDB](https://book.utilitr.org/03_Fiches_thematiques/Fiche_duckdb.html)
  - Orientation [**fichier**]{.blue2} (`Arrow`) VS orientation [**BDD**]{.blue2} (`DuckDB`)

. . .

- [**Traitement en-mémoire optimisé**]{.orange}
  - [**Orientés-colonne**]{.blue2}
  - [***Lazy evaluation***]{.blue2} (prochaine slide)

. . .

- Très bonne [**intégration**]{.blue2}:
  - Avec le `tidyverse` ({{< fa brands r-project >}})
  - Avec le système de stockage `S3`

## Les frameworks


![](https://linogaliana.github.io/parquet-recensement-tutomate-slides/img/librairies2.png){fig-align="center"}


## La lazy evaluation

* Les frameworks comme **[Arrow]{.orange}** ou **[DuckDB]{.orange}** n’exécutent pas immédiatement les opérations

. . .

* Les instructions sont **[optimisées avant exécution]{.orange}**
    * Vous écrivez un **[plan d'exécution]{.blue2}**, réinterprété

. . .

* Avantages :
    * __[Moins de données]{.blue2}__ manipulées inutilement
    * __[Moins de RAM]{.blue2}__ consommée
    * __[Exécution plus rapide]{.blue2}__ car optimisée


## La lazy evaluation

::: {.nonincremental}
::::: {.callout-note}
## Exemple d'une requête *lazy*

En supposant qu'`achille` est un objet `Arrow` ou `DuckDB`:

```{.r}
n_logements_depcom <- achille |>
  filter(dep %in% c("01", "02", "03")) |>  #<1>
  select(idlogement, depcom) |>  # <2>
  group_by(depcom) |>
  summarise(n_logements = n()) |>
  collect()  #<3>
```
1. Récupère seulement les données nécessaires
2. Récupère seulement les variables nécessaires
3. Les __[calculs ne sont effectués qu'à cette étape]{.orange}__ !

:::::
:::

## La lazy evaluation {.nonincremental}

* Voici le début du plan:

![](/slides-data/images/lazyeval1.png)

❓️ [_Pourrait-il être optimisé ?_]{.blueµ2}

## La lazy evaluation {.nonincremental}

* Voici le plan plus optimal:
  * [__Predicate pushdown__]{.orange}

![](/slides-data/images/lazyeval2.png)


## `Parquet` gagne sur tous les tableaux {.nonincremental}

![_Benchmarks_ faits pour la formation aux bonnes pratiques de l'Insee](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/img/tableau-perf-parquet.png){fig-align="center" height="500"}


## Ressources complémentaires

- Les posts d'Eric Mauvière sur [icem7.fr/](https://www.icem7.fr/)

. . .

- [Webinaire du CASD](https://www.casd.eu/webinaire-casd-data-tech/) sur `Parquet` et `DuckDB`

. . .

- [La formation aux bonnes pratiques](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/) de l'Insee

. . .

- Un atelier de l'EHESS sur `Parquet` avec de nombreux exemples [ici](https://linogaliana.github.io/parquet-recensement-tutomate/)

. . .

- Le [cours de mise en production](https://ensae-reproductibilite.github.io/website/) de l'ENSAE

## Applications

![](/slides-data/images/comparatifs_exo.png)

## Ce n'est pas fini !

![](https://minio.lab.sspcloud.fr/lgaliana/generative-art/ssphub/tunes_chasing.jpg)


## Nouvelles opportunités avec cet écosystème

- [__Intégration native avec `S3`__]{.orange}
    - Pour [**travailler sur des serveurs à l'état de l'art**]{.blue2}...
    - Plutôt que sur des ordinateurs aux ressources limitées

. . .

- [DuckDB WASM](https://minio.lab.sspcloud.fr/lgaliana/generative-art/ssphub/tunes_chasing.jpg) pour faire du [__`DuckDB` dans le navigateur__]{.orange} :
    - Pour des [**_dataviz_ réactives**]{.blue2}... dans des [**sites statiques**]{.blue2} !
    - Bye bye les galères de déploiement de `Shiny`, `Streamlit`...


# Fonctionnalités plus avancées

## Les extensions spatiales

- Possibilité de lire/écrire des [**objets géographiques**]{.orange} dans `Parquet`
  - Compatible avec les standards `GeoParquet`
  - Extension `SPATIAL`

. . .

- Permet des traitements [**géographiques efficaces**]{.blue2} :
  - Jointures spatiales, calculs de distance…
  - Récupère le résultat sous `sf`


## Travailler avec `S3`

* Beaucoup plus simple qu'un _data warehouse_ et des VM `postgre`

. . .

* On peut lire la donnée sur `S3` _presque comme si_ elle était en local

```{.python}
FROM 's3://bucket_name/filename.extension';
SELECT *
WHERE DEPT=='36'
```

## `DuckDB` dans le navigateur

- Grâce à `DuckDB-WASM`, on peut exécuter du SQL [**dans le navigateur**]{.orange} 🎯
  - Embarqué par défaut sur [`Observablehq`](https://observablehq.com/) et [`Quarto`](https://quarto.org/docs/interactive/ojs/)

. . .

- Idéal pour des [**applications interactives**]{.orange} :
  - Visualisations réactives sur des [**sites statiques**]{.blue2} 
  - ⚡ [**Pas besoin de serveur**]{.blue2} {{< fa brands r-project >}} ou {{< fa brands python >}}, tout est côté client !


## Exemple


```{ojs}
//| echo: false
html`
  <div style="display: flex; flex-direction: column; gap: 1rem;">

    <!-- Search bar at the top -->
    <div>${viewof search}</div>

    <!-- Two-column block -->
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; backgroundColor: '#293845';">
      <div>${produce_histo(dvf)}</div>
      <div>${viewof table_dvf}</div>
    </div>


  </div>
`
```

{{< include "_interactive_parquet.qmd" >}}


```{ojs}
viewof table_dvf = Inputs.table(dvf, {columns: ["date", "valeur_fonciere"], rows: 15})

produce_histo = function(dvf){
  const histo = Plot.plot({
  style: {backgroundColor: "transparent"},
  marks: [
    Plot.rectY(dvf, Plot.binX({y: "count"}, {x: "valeur_fonciere", fill: "#ff562c"})),
    Plot.ruleY([0])
  ]
})
  return histo
}
```



## Des questions ?

![](https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/kid.png)